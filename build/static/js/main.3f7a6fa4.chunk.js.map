{"version":3,"sources":["services/people.js","App.js","index.js"],"names":["baseUrl","peopleService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","deleteContact","delete","console","log","Notification","message","notificationType","className","Filter","inputControlState","changeHandler","value","onChange","PersonForm","submitHandler","onSubmit","type","People","people","peopleState","handleDeleteContact","peopleToShow","filter","person","name","toLowerCase","includes","map","number","contactName","DeleteContact","onClick","App","useState","setPeople","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","notificationMessage","setNotificationMessage","setNotificationType","useEffect","initialPeople","e","target","preventDefault","existingPerson","find","o","sameNamePerson","alert","window","confirm","updatedPerson","setTimeout","catch","error","status","contactObject","date","Date","toISOString","returnedContact","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f7a6fa4.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/people\";\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)};\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n};\n\nconst deleteContact = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => console.log('contact deleted', response))\n};\n\nconst peopleService = { getAll, create, update, deleteContact}\n    \nexport default peopleService;","import React, { useState, useEffect } from \"react\";\nimport peopleService from \"./services/people\";\n\nconst Notification = ({ message, notificationType }) => {\n  if (message === null) {\n    return null;\n  }\n\n  if (notificationType === \"success\") {\n    return <div className=\"success\">{message}</div>;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nconst Filter = ({ inputControlState, changeHandler }) => {\n  return (\n    <div>\n      filter shown with:{\" \"}\n      <input value={inputControlState} onChange={changeHandler} />\n    </div>\n  );\n};\n\nconst PersonForm = ({ submitHandler, inputControlState, changeHandler }) => {\n  return (\n    <form onSubmit={submitHandler}>\n      <div>\n        name: <input value={inputControlState[0]} onChange={changeHandler[0]} />\n      </div>\n      <div>\n        number:{\" \"}\n        <input value={inputControlState[1]} onChange={changeHandler[1]} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst People = ({ people, peopleState, handleDeleteContact }) => {\n  // Filters out contacts based on the user input controlled by newFilter state\n  const peopleToShow = people.filter((person) =>\n    person.name.toLowerCase().includes(peopleState.toLowerCase())\n  );\n\n  return (\n    <ul>\n      {peopleToShow.map((person) => (\n        <li key={person.id}>\n          {person.name} {person.number}{\" \"}\n          <DeleteContact\n            id={person.id}\n            handleDeleteContact={handleDeleteContact}\n            contactName={person.name}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst DeleteContact = ({ id, handleDeleteContact, contactName }) => {\n  return (\n    <button onClick={() => handleDeleteContact(id, contactName)}>delete</button>\n  );\n};\n\nconst App = () => {\n  const [people, setPeople] = useState([]);\n\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newFilter, setNewFilter] = useState(\"\");\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [notificationType, setNotificationType] = useState(null);\n\n  useEffect(() => {\n    peopleService.getAll().then((initialPeople) => {\n      setPeople(initialPeople);\n    });\n  }, []);\n\n  // console.log('render', people.length, 'people')\n\n  const addContact = (e) => {\n    e.preventDefault();\n    const existingPerson = people.find(\n      (o) => o.name === newName && o.number === newNumber\n    );\n    const sameNamePerson = people.find((o) => o.name === newName);\n\n    if (existingPerson) {\n      alert(`${newName} is already added to phonebook`);\n    } else if (sameNamePerson) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const updatedPerson = { ...sameNamePerson, number: newNumber };\n        peopleService\n          .update(updatedPerson.id, updatedPerson)\n          .then((response) => {\n            console.log(\"axios response:\", response.data);\n            // Update the state to show the updated contact details on the frontend.\n            // If person id from state matches updated contact id, use the data from backend instead of\n            // the person state from frontend\n            setPeople(\n              people.map((person) =>\n                person.id !== updatedPerson.id ? person : response.data\n              )\n            );\n            setNotificationType(\"success\");\n\n            setNotificationMessage(\n              `${updatedPerson.name}'s details have been successfully updated.`\n            );\n            setTimeout(() => {\n              setNotificationMessage(null);\n              setNotificationType(null);\n            }, 5000);\n            setNewName(\"\");\n            setNewNumber(\"\");\n          })\n          .catch(error => {\n            setNotificationType(\"error\");\n            setNotificationMessage(\n              `Error ${error.response.status}: ${error.response.data.error}`\n            );\n            setTimeout(() => {\n              setNotificationMessage(null);\n              setNotificationType(null);\n            }, 5000);\n            // To handle an edge case where there is an attempt to update the contact but the contact is deleted before the put request could be sent.\n            if (error.response.status === 404) {\n              setPeople(people.filter((person) => person.id !== updatedPerson.id))\n            }\n          });\n      }\n    } else {\n      const contactObject = {\n        name: newName,\n        number: newNumber,\n        date: new Date().toISOString(),\n      };\n\n      peopleService.create(contactObject)\n        .then((returnedContact) => {\n          setPeople(people.concat(returnedContact));\n          setNewName(\"\");\n          setNewNumber(\"\");\n\n          setNotificationMessage(\n            `${contactObject.name} has been successfully added to the phonebook.`\n          );\n          setNotificationType(\"success\");\n          setTimeout(() => {\n            setNotificationMessage(null);\n            setNotificationType(null);\n          }, 5000);\n        })\n        .catch(error => {\n          setNotificationMessage(\n            error.response.data.error\n          );\n          setNotificationType(\"error\")\n          setTimeout(() => {\n            setNotificationMessage(null);\n            setNotificationType(null);\n          }, 5000);\n        });\n    }\n  };\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumChange = (e) => {\n    // console.log(newNumber);\n    setNewNumber(e.target.value);\n  };\n\n  const handleFilter = (e) => {\n    setNewFilter(e.target.value);\n  };\n\n  const handleDeleteContact = (id, contactName) => {\n    if (window.confirm(`Delete ${contactName}?`)) {\n      peopleService.deleteContact(id);\n      // Update the state to filter out the deleted contact from the Frontend\n      setPeople(people.filter((person) => person.id !== id));\n    }\n  };\n\n  return (\n    <div>\n      <Notification message={notificationMessage} notificationType={notificationType} />\n      <h2>Phonebook</h2>\n      <Filter inputControlState={newFilter} changeHandler={handleFilter} />\n\n      <h2>add a new</h2>\n      <PersonForm\n        submitHandler={addContact}\n        inputControlState={[newName, newNumber]}\n        changeHandler={[handleNameChange, handleNumChange]}\n      />\n\n      <h2>Numbers</h2>\n      <People\n        people={people}\n        peopleState={newFilter}\n        handleDeleteContact={handleDeleteContact}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}